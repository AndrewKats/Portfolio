<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Formula</name>
    </assembly>
    <members>
        <member name="T:SpreadsheetUtilities.Formula">
            <summary>
            Represents formulas written in standard infix notation using standard precedence
            rules.  The allowed symbols are non-negative numbers written using double-precision 
            floating-point syntax; variables that consist of a letter or underscore followed by 
            zero or more letters, underscores, or digits; parentheses; and the four operator 
            symbols +, -, *, and /.  
            
            Spaces are significant only insofar that they delimit tokens.  For example, "xy" is
            a single variable, "x y" consists of two variables "x" and y; "x23" is a single variable; 
            and "x 23" consists of a variable "x" and a number "23".
            
            Associated with every formula are two delegates:  a normalizer and a validator.  The
            normalizer is used to convert variables into a canonical form, and the validator is used
            to add extra restrictions on the validity of a variable (beyond the standard requirement 
            that it consist of a letter or underscore followed by zero or more letters, underscores,
            or digits.)  Their use is described in detail in the constructor and method comments.
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.Formula.equation">
            <summary>
            This variable is used to hold the equation once it has been parsed
            </summary>
        </member>
        <member name="F:SpreadsheetUtilities.Formula.IsVariable">
            <summary>
            used to evaluate whether or not a token is a variable or not
            </summary>
            code for regex found at http://stackoverflow.com/questions/14659287/regex-for-english-characters-hyphen-and-underscore
        </member>
        <member name="T:SpreadsheetUtilities.Formula.ErrorCheck">
            <summary>
            delegate that is used to throw errors
            </summary>
            <param name="token"></param>
        </member>
        <member name="P:SpreadsheetUtilities.Formula.variables">
            <summary>
            holds all of the variables in the equation array
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.#ctor(System.String)">
            <summary>
            Creates a Formula from a string that consists of an infix expression written as
            described in the class comment.  If the expression is syntactically invalid,
            throws a FormulaFormatException with an explanatory Message.
            
            The associated normalizer is the identity function, and the associated validator
            maps every string to true.  
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.#ctor(System.String,System.Func{System.String,System.String},System.Func{System.String,System.Boolean})">
            <summary>
            Creates a Formula from a string that consists of an infix expression written as
            described in the class comment.  If the expression is syntactically incorrect,
            throws a FormulaFormatException with an explanatory Message.
            
            The associated normalizer and validator are the second and third parameters,
            respectively.  
            
            If the formula contains a variable v such that normalize(v) is not a legal variable, 
            throws a FormulaFormatException with an explanatory message. 
            
            If the formula contains a variable v such that isValid(normalize(v)) is false,
            throws a FormulaFormatException with an explanatory message.
            
            Suppose that N is a method that converts all the letters in a string to upper case, and
            that V is a method that returns true only if a string consists of one letter followed
            by one digit.  Then:
            
            new Formula("x2+y3", N, V) should succeed
            new Formula("x+y3", N, V) should throw an exception, since V(N("x")) is false
            new Formula("2x+y3", N, V) should throw an exception, since "2x+y3" is syntactically incorrect.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.Evaluate(System.Func{System.String,System.Double})">
             <summary>
             Evaluates this Formula, using the lookup delegate to determine the values of
             variables.  When a variable symbol v needs to be determined, it should be looked up
             via lookup(normalize(v)). (Here, normalize is the normalizer that was passed to 
             the constructor.)
             
             For example, if L("x") is 2, L("X") is 4, and N is a method that converts all the letters 
             in a string to upper case:
             
             new Formula("x+7", N, s => true).Evaluate(L) is 11
             new Formula("x+7").Evaluate(L) is 9
             
             Given a variable symbol as its parameter, lookup returns the variable's value 
             (if it has one) or throws an ArgumentException (otherwise).
             
             If no undefined variables or divisions by zero are encountered when evaluating 
             this Formula, the value is returned.  Otherwise, a FormulaError is returned.  
             The Reason property of the FormulaError should have a meaningful explanation.
            
             This method should never throw an exception.
             </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.GetVariables">
            <summary>
            Enumerates the normalized versions of all of the variables that occur in this 
            formula.  No normalization may appear more than once in the enumeration, even 
            if it appears more than once in this Formula.
            
            For example, if N is a method that converts all the letters in a string to upper case:
            
            new Formula("x+y*z", N, s => true).GetVariables() should enumerate "X", "Y", and "Z"
            new Formula("x+X*z", N, s => true).GetVariables() should enumerate "X" and "Z".
            new Formula("x+X*z").GetVariables() should enumerate "x", "X", and "z".
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.ToString">
            <summary>
            Returns a string containing no spaces which, if passed to the Formula
            constructor, will produce a Formula f such that this.Equals(f).  All of the
            variables in the string should be normalized.
            
            For example, if N is a method that converts all the letters in a string to upper case:
            
            new Formula("x + y", N, s => true).ToString() should return "X+Y"
            new Formula("x + Y").ToString() should return "x+Y"
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.Equals(System.Object)">
            <summary>
            If obj is null or obj is not a Formula, returns false.  Otherwise, reports
            whether or not this Formula and obj are equal.
            
            Two Formulae are considered equal if they consist of the same tokens in the
            same order.  To determine token equality, all tokens are compared as strings 
            except for numeric tokens, which are compared as doubles, and variable tokens,
            whose normalized forms are compared as strings.
            
            For example, if N is a method that converts all the letters in a string to upper case:
             
            new Formula("x1+y2", N, s => true).Equals(new Formula("X1  +  Y2")) is true
            new Formula("x1+y2").Equals(new Formula("X1+Y2")) is false
            new Formula("x1+y2").Equals(new Formula("y2+x1")) is false
            new Formula("2.0 + x7").Equals(new Formula("2.000 + x7")) is true
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.op_Equality(SpreadsheetUtilities.Formula,SpreadsheetUtilities.Formula)">
            <summary>
            Reports whether f1 == f2, using the notion of equality from the Equals method.
            Note that if both f1 and f2 are null, this method should return true.  If one is
            null and one is not, this method should return false.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.op_Inequality(SpreadsheetUtilities.Formula,SpreadsheetUtilities.Formula)">
            <summary>
            Reports whether f1 != f2, using the notion of equality from the Equals method.
            Note that if both f1 and f2 are null, this method should return false.  If one is
            null and one is not, this method should return true.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.GetHashCode">
            <summary>
            Returns a hash code for this Formula.  If f1.Equals(f2), then it must be the
            case that f1.GetHashCode() == f2.GetHashCode().  Ideally, the probability that two 
            randomly-generated unequal Formulae have the same hash code should be extremely small.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.GetTokens(System.String)">
            <summary>
            Given an expression, enumerates the tokens that compose it.  Tokens are left paren;
            right paren; one of the four operator symbols; a string consisting of a letter or underscore
            followed by zero or more letters, digits, or underscores; a double literal; and anything that doesn't
            match one of those patterns.  There are no empty tokens, and no token contains white space.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.CheckIfFormulaIsLegal(System.Func{System.String,System.String},System.Func{System.String,System.Boolean})">
            <summary>
            checks to see if everything typed into the given formula is a legal expression
            </summary>
            <param name="normalize"></param>
            <param name="isValid"></param>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.OneTokenMinimum">
            <summary>
            checks to make sure that formula sent is not empty
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.LegalTokens(System.Func{System.String,System.String},System.Func{System.String,System.Boolean})">
            <summary>
            checks to see if all of the tokens placed in the equation are legal
            </summary>
            <param name="normalize"></param>
            <param name="isValid"></param>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.ProperOrder">
            <summary>
            Check to see if all of the tokens in the equation are in a proper order
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.SwitchFunction(System.String)">
            <summary>
            changes the error checking function based on the current token
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.IncreaseParenthesisCount(System.String,System.Int32[])">
            <summary>
            increases parenthesis count if token is a parenthesis
            </summary>
            <param name="token"></param>
            <param name="ParenthesisCount"></param>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.StartingTokenRule(System.String)">
            <summary>
            The first token of an expression must be a number, a variable, or an opening parenthesis.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.RightParenthesisRule(System.Int32[])">
            <summary>
            The total number of opening parentheses must equal the total number of closing parentheses.
            </summary>
            <param name="ParenthesisCount"></param>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.BalanceParenthesisRule(System.Int32[])">
            <summary>
            The total number of opening parentheses must equal the total number of closing parentheses.
            </summary>
            <param name="ParenthesisCount"></param>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.EndingTokenRule(System.String)">
            <summary>
            The last token of an expression must be a number, a variable, or a closing parenthesis.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.ParenthesisFollowingRule(System.String)">
            <summary>
            Any token that immediately follows an opening parenthesis or an operator must 
            be either a number, a variable, or an opening parenthesis.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.ExtraFollowingRule(System.String)">
            <summary>
            Any token that immediately follows a number, a variable, or a 
            closing parenthesis must be either an operator or a closing parenthesis.
            </summary>
            <param name="token"></param>
        </member>
        <member name="T:SpreadsheetUtilities.FormulaFormatException">
            <summary>
            Used to report syntactic errors in the argument to the Formula constructor.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.FormulaFormatException.#ctor(System.String)">
            <summary>
            Constructs a FormulaFormatException containing the explanatory message.
            </summary>
        </member>
        <member name="T:SpreadsheetUtilities.FormulaError">
            <summary>
            Used as a possible return value of the Formula.Evaluate method.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.FormulaError.#ctor(System.String)">
            <summary>
            Constructs a FormulaError containing the explanatory reason.
            </summary>
            <param name="reason"></param>
        </member>
        <member name="P:SpreadsheetUtilities.FormulaError.Reason">
            <summary>
             The reason why this FormulaError was created.
            </summary>
        </member>
        <member name="T:SpreadsheetUtilities.Evaluator">
            <summary>
            Evaluator Class is used to solve equations entered as a string
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Evaluator.Evaluate(System.String[],System.Func{System.String,System.Double})">
            <summary>
            evaluates arithmetic expressions written using standard infix notation
            </summary>
            <param name="equation">string to be evaluated</param>
            <param name="variableEvaluator">function which should return value of variables sent with expression</param>
            <returns>an int of the solved equation</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Evaluator.SolveEquation(System.String[],System.Func{System.String,System.Double},System.Collections.Generic.Stack{System.Double},System.Collections.Generic.Stack{System.String})">
            <summary>
            takes an array of strings and then solves and solves the equation in the array
            </summary>
            <param name="equation">array of strings which stores equation</param>
            <param name="variableEvaluator">function which should return value of variables sent with expression</param>
            <param name="values">stack of doubles witch will hold all values from the equation</param>
            <param name="operators">stack of strings witch will hold all operators from the equation</param>
        </member>
        <member name="M:SpreadsheetUtilities.Evaluator.PlusAndMinusOperation(System.Collections.Generic.Stack{System.Double},System.Collections.Generic.Stack{System.String})">
            <summary>
            used to perform addition and subtraction operations
            </summary>
            <param name="values">stack of doubles witch will hold all values from the equation</param>
            <param name="operators">stack of strings witch will hold all operators from the equation</param>
        </member>
        <member name="M:SpreadsheetUtilities.Evaluator.MultiplcationAndDivsionOperation(System.Collections.Generic.Stack{System.Double},System.Collections.Generic.Stack{System.String})">
            <summary>
            used to perform multiplication and division operations
            </summary>
            <param name="values">stack of doubles witch will hold all values from the equation</param>
            <param name="operators">stack of strings witch will hold all operators from the equation</param>
        </member>
        <member name="M:SpreadsheetUtilities.Evaluator.Operate(System.String,System.Collections.Generic.Stack{System.Double},System.Collections.Generic.Stack{System.String})">
            <summary>
            performs an opperation based on the opperator sent
            </summary>
            <param name="operate">operation with be performed</param>
            <param name="values">stack of doubles witch will hold all values from the equation</param>
            <param name="operators">stack of strings witch will hold all operators from the equation</param>
        </member>
        <member name="M:SpreadsheetUtilities.Evaluator.RightParenthesisOperation(System.Collections.Generic.Stack{System.Double},System.Collections.Generic.Stack{System.String})">
            <summary>
            performs the math on the inside of Parenthesis and deletes left Parenthesis
            from the opperators stack
            </summary>
            <param name="values">stack of doubles witch will hold all values from the equation</param>
            <param name="operators">stack of strings witch will hold all operators from the equation</param>
        </member>
        <member name="M:SpreadsheetUtilities.Evaluator.HasOnTop``1(System.Collections.Generic.Stack{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks to see if a stack has a certain group of an object at the top
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stack">the stack that will be checked</param>
            <param name="tokens">the IEnumerable of tokens to check for</param>
            <returns></returns>
        </member>
    </members>
</doc>
